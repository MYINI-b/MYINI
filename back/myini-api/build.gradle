plugins {
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    queryDslVersion = "5.0.0"
}


jar {
    enabled = true
}


dependencies {
    implementation(project(":myini-domain"))
    implementation(project(":myini-common"))
    implementation(project(":myini-external"))

    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // oauth 위한 의존성

    //fileio
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.4'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.10.0'

    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    //aws s3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    implementation 'com.googlecode.json-simple:json-simple:1.1.1' // json 처리를 위한 라이브러리

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'


    compile group: 'net.lingala.zip4j', name: 'zip4j', version: '2.6.1'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

bootJar {
    enabled = true
    dependsOn asciidoctor
    copy {
        from "build/asciidoc/html5"
        into "src/main/resources/static/docs/"
    }
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
